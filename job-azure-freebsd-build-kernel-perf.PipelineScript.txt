
import java.text.SimpleDateFormat

def BuildBranch = "${env.Build_Branch}"
def osVHD = "${env.OsVHD}"
def location = "${env.location}"
def isBuildKernelSuccess = ""
def SecretsFilePath = "C:/DoNotDelete/secretsFile.xml"
def List<String>DataPaths = new ArrayList<String>()
def List<String>imagesToBeBuilt = new ArrayList<String>()
def List<String>branchesToBeBuilt = new ArrayList<String>()
def List<String>osVHDToBeTested = new ArrayList<String>()

def RunPowershellCommand(psCmd) {
	println "${psCmd}"
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}


pipeline
{
	parameters {
		booleanParam(defaultValue: true, description: 'BUILD KERNEL.', name: 'BUILD_KERNEL')
		string(defaultValue: '', description: 'The vhd name in azure', name: 'OsVHD')
		string(defaultValue: '', description: 'The test cycle name of functional test.', name: 'TestCycle')
		booleanParam(defaultValue: true, description: 'Fio single disk test.', name: 'FIO_1Disk')
		booleanParam(defaultValue: false, description: 'Fio x12 disks (RAID0) test.', name: 'FIO_12Disks')
		booleanParam(defaultValue: true, description: 'Sio single disk test.', name: 'SIO_1Disk')
		booleanParam(defaultValue: false, description: 'Sio x12 disks (RAID0) test.', name: 'SIO_12Disks')
		booleanParam(defaultValue: true, description: 'KQ perf test.', name: 'KQ_Perf')
		booleanParam(defaultValue: true, description: 'Net perf test.', name: 'Net_Perf')
		choice(choices: 'disabled\nenabled\nboth', description: 'Provide SRIOV state for tests: enabled, disabled or both.', name: 'sriov')
		choice(choices: 'eastus2\naustraliaeast\nsoutheastasia\nwestcentralus\neastus', description: 'Data center location.', name: 'location')
		choice(choices: 'ALL\nmaster\nstable/10\nstable/11', description: 'The branch to be built. ALL means the master, stable/10 and stable/11 branchs are all built.', name: 'Build_Branch')
    }

    agent {
        node {
          label 'azurebsd'
        }
    }
	

	
	stages{	
		stage('Prepare test parameters') {
			steps 
            {
				script {
					try{
						// Prepare the image(s) and branch(es) which will be built.
						if( "${env.Build_Branch}" == 'master' )
						{
							imagesToBeBuilt.add('MicrosoftOSTC FreeBSD 11.1 latest')
							branchesToBeBuilt.add('master')
						}
						
						if( "${env.Build_Branch}" == 'stable/10' )
						{
							imagesToBeBuilt.add('MicrosoftOSTC FreeBSD 10.4 latest')
							branchesToBeBuilt.add('stable/10')
						}
						
						if( "${env.Build_Branch}" == 'stable/11' )
						{
							imagesToBeBuilt.add('MicrosoftOSTC FreeBSD 11.1 latest')
							branchesToBeBuilt.add('stable/11')
						}
					
						if( "${env.Build_Branch}" == 'ALL' )
						{
							imagesToBeBuilt.add('MicrosoftOSTC FreeBSD 11.1 latest')
							imagesToBeBuilt.add('MicrosoftOSTC FreeBSD 11.1 latest')
							imagesToBeBuilt.add('MicrosoftOSTC FreeBSD 10.4 latest')
							
							branchesToBeBuilt.add('master')
							branchesToBeBuilt.add('stable/11')
							branchesToBeBuilt.add('stable/10')
						}

						// Prepare the DataPath for network perf test.
					    if( env.sriov.contains('disabled')  ) 
					    {
							DataPaths.add('Synthetic')
					    }
					   
					    if( env.sriov.contains('enabled')  ) 
					    {
							DataPaths.add('Sriov')
					    }
					   
					    if( env.sriov.contains('both')  ) 
						{
							DataPaths.add('Synthetic')
							DataPaths.add('Sriov')
					    }
						
						// Prepare the osVHD which will be built.
						if( osVHD )
						{
							osVHDToBeTested.add("${osVHD}")						
						}
						
						println "The branch(es) to be tested as shown as below:"
						for (int i = 0; i < branchesToBeBuilt.size(); i++) {
							println "${branchesToBeBuilt[i]}"
						}
						
						println "The DataPath(s) to be tested as shown as below:"
						for (int i = 0; i < DataPaths.size(); i++) {
							println "${DataPaths[i]}"
						}
						
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Prepare test parameters STAGE_FAILED_EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
	
	
		stage('Build kernel dependencies') {
            when {
                expression { env.BUILD_KERNEL.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						def dateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
						def date = new Date()
						
						for (int i = 0; i < branchesToBeBuilt.size(); i++) {
							if( "${branchesToBeBuilt[i]}" == 'master' )
							{
								osVHD = "FreeBSD" + "_master_" + dateFormat.format(date) + ".vhd"
							}
							
							if( "${branchesToBeBuilt[i]}" == 'stable/11' )
							{
								osVHD = "FreeBSD" + "_stable11_" + dateFormat.format(date) + ".vhd"
							}
							
							if( "${branchesToBeBuilt[i]}" == 'stable/10' )
							{
								osVHD = "FreeBSD" + "_stable10_" + dateFormat.format(date) + ".vhd"
							}
							
							// Prepare the osVHD(s) which will be built.
							osVHDToBeTested.add("${osVHD}")
							
							println "Image to be built: ${imagesToBeBuilt[i]}"
							println "Branch to be built: ${branchesToBeBuilt[i]}"
							println "Blob name: ${osVHD}"
							
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdbuildkernel'" +
								" -testCycle 'BUILD-KERNEL'" +
								" -ARMImageName '${imagesToBeBuilt[i]}'" +
								" -StorageAccount 'ExistingStorage_Standard'" +
								" -destBlobName '${osVHD}'" +
								" -customBISBranch '${branchesToBeBuilt[i]}'" +
								" -customSecretsFilePath '${SecretsFilePath}'" 
								)
							
							isBuildKernelSuccess = "True"
						
						}
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Build kernel EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
		
		stage('FIO_1Disk dependencies') {
            when {
                expression { env.FIO_1Disk.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( isBuildKernelSuccess == 'True' || osVHD )
						{
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							
							for (int i = 0; i < osVHDToBeTested.size(); i++) {
								println "The current test osVHD: ${osVHDToBeTested[i]}"
								$cmd =  ".\\RunAzureTests.ps1"
								$cmd += " -testLocation '${location}'"
								$cmd += " -DistroIdentifier 'bsdfiosingledisk'"
								$cmd += " -testCycle 'PERF-FIO-SingleDisk'"
								$cmd += " -OsVHD '${osVHDToBeTested[i]}'"
								$cmd += " -StorageAccount 'ExistingStorage_Premium'"
								$cmd += " -customSecretsFilePath '${SecretsFilePath}'"
								$cmd += " -ResultDBTable 'Perf_FreeBSD_Azure_fio'"
								
								RunPowershellCommand($cmd)
							}
							
						}
						else
						{
							println "Build kernel failed or OsVHD not found, so skip the test."
						}						
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Stage FIO_1Disk EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
		
		
		stage('FIO_12Disks dependencies') {
            when {
                expression { env.FIO_12Disks.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( isBuildKernelSuccess == 'True' || osVHD )
						{
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'

							for (int i = 0; i < osVHDToBeTested.size(); i++) {
								println "The current test osVHD: ${osVHDToBeTested[i]}"
								$cmd =  ".\\RunAzureTests.ps1"
								$cmd += " -testLocation '${location}'"
								$cmd += " -DistroIdentifier 'bsdfioraid0'"
								$cmd += " -testCycle 'PERF-FIO-RAID0'"
								$cmd += " -OsVHD '${osVHDToBeTested[i]}'"
								$cmd += " -StorageAccount 'ExistingStorage_Premium'"
								$cmd += " -customSecretsFilePath '${SecretsFilePath}'"
								$cmd += " -ResultDBTable 'Perf_FreeBSD_Azure_fio'"
								
								RunPowershellCommand($cmd)
							}
						}
						else
						{
							println "Build kernel failed or OsVHD not found, so skip the test."
						}	
					
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Stage FIO_12Disks EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
		
		stage('SIO_1Disk dependencies') {
            when {
                expression { env.SIO_1Disk.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( isBuildKernelSuccess == 'True' || osVHD )
						{
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
								
							for (int i = 0; i < osVHDToBeTested.size(); i++) {
								println "The current test osVHD: ${osVHDToBeTested[i]}"
								$cmd =  ".\\RunAzureTests.ps1"
								$cmd += " -testLocation '${location}'"
								$cmd += " -DistroIdentifier 'bsdSiosingledisk'"
								$cmd += " -testCycle 'PERF-SIO-SingleDisk'"
								$cmd += " -OsVHD '${osVHDToBeTested[i]}'"
								$cmd += " -StorageAccount 'ExistingStorage_Premium'"
								$cmd += " -customSecretsFilePath '${SecretsFilePath}'"
								$cmd += " -ResultDBTable 'Perf_FreeBSD_Azure_Sio'"
								
								RunPowershellCommand($cmd)
							}
						}
						else
						{
							println "Build kernel failed or OsVHD not found, so skip the test."
						}	
				
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Stage SIO_1Disk EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
		
		stage('SIO_12Disks dependencies') {
            when {
                expression { env.SIO_12Disks.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( isBuildKernelSuccess == 'True' || osVHD )
						{
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
								
							for (int i = 0; i < osVHDToBeTested.size(); i++) {
								println "The current test osVHD: ${osVHDToBeTested[i]}"
								$cmd =  ".\\RunAzureTests.ps1"
								$cmd += " -testLocation '${location}'"
								$cmd += " -DistroIdentifier 'bsdsioraid0'"
								$cmd += " -testCycle 'PERF-SIO-RAID0'"
								$cmd += " -OsVHD '${osVHDToBeTested[i]}'"
								$cmd += " -StorageAccount 'ExistingStorage_Premium'"
								$cmd += " -customSecretsFilePath '${SecretsFilePath}'"
								$cmd += " -ResultDBTable 'Perf_FreeBSD_Azure_Sio'"
								
								RunPowershellCommand($cmd)
							}
						}
						else
						{
							println "Build kernel failed or OsVHD not found, so skip the test."
						}	
			
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Stage SIO_12Disks EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
		
		
		stage('KQ_Perf dependencies') {
            when {
                expression { env.KQ_Perf.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( isBuildKernelSuccess == 'True' || osVHD )
						{
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							
							for (int j = 0; j < DataPaths.size(); j++) {
								for (int i = 0; i < osVHDToBeTested.size(); i++) {
									println "The current test image: ${osVHDToBeTested[i]}"
									$cmd =  ".\\RunAzureTests.ps1"
									$cmd += " -testLocation '${location}'"
									$cmd += " -DistroIdentifier 'bsdkqperf'"
									$cmd += " -testCycle 'PERF-KQ'"
									$cmd += " -OsVHD '${osVHDToBeTested[i]}'"
									$cmd += " -StorageAccount 'ExistingStorage_Standard'"
									$cmd += " -customSecretsFilePath '${SecretsFilePath}'"
									$cmd += " -ResultDBTable 'Perf_FreeBSD_Azure_KQ'"
									if( "${DataPaths[j]}" == 'Sriov' )
									{
										$cmd += " -EnableAcceleratedNetworking"
									}
									
									RunPowershellCommand($cmd)
								}
							}

						}
						else
						{
							println "Build kernel failed or OsVHD not found, so skip the test."
						}	
						
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Stage KQ_Perf EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
		
		
		stage('Net_Perf dependencies') {
            when {
                expression { env.Net_Perf.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( isBuildKernelSuccess == 'True' || osVHD )
						{
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							
							for (int j = 0; j < DataPaths.size(); j++) {
								for (int i = 0; i < osVHDToBeTested.size(); i++) {
									println "The current test image: ${osVHDToBeTested[i]}"
									$cmd =  ".\\RunAzureTests.ps1"
									$cmd += " -testLocation '${location}'"
									$cmd += " -DistroIdentifier 'bsdnetperf'"
									$cmd += " -testCycle 'PERF-NETWORK-LATENCY'"
									$cmd += " -OsVHD '${osVHDToBeTested[i]}'"
									$cmd += " -StorageAccount 'ExistingStorage_Standard'"
									$cmd += " -customSecretsFilePath '${SecretsFilePath}'"
									$cmd += " -ResultDBTable 'Perf_FreeBSD_Azure_NetPerf'"
									if( "${DataPaths[j]}" == 'Sriov' )
									{
										$cmd += " -EnableAcceleratedNetworking"
									}
									
									RunPowershellCommand($cmd)
								}
							}
						}
						else
						{
							println "Build kernel failed or OsVHD not found, so skip the test."
						}	
			
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Stage Net_Perf EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
		
		
		stage('Function dependencies') {
            when {
                 expression { env.TestCycle != '' }
            }
			
			steps 
            {
				script {
					try{
						if( isBuildKernelSuccess == 'True' || osVHD )
						{
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'

							def cycles = "${env.TestCycle}".split(',')
							for (cycle in cycles) {							
								for (int i = 0; i < osVHDToBeTested.size(); i++) {
									println "The current test osVHD: ${osVHDToBeTested[i]}"
									$cmd =  ".\\RunAzureTests.ps1"
									$cmd += " -testLocation '${location}'"
									$cmd += " -DistroIdentifier 'bsdfunc'"
									$cmd += " -testCycle '${cycle}'"
									$cmd += " -OsVHD '${osVHDToBeTested[i]}'"
									$cmd += " -StorageAccount 'ExistingStorage_Standard'"
									$cmd += " -customSecretsFilePath '${SecretsFilePath}'"
									
									RunPowershellCommand($cmd)
								}
							}
						}
						else
						{
							println "Build kernel failed or OsVHD not found, so skip the test."
						}	
						
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "Stage Function test EXCEPTION with error: " + exc.toString()
					}

				}
			}
		
		}
		
	}

	//Post #TODO
  
}






def FIO_1Disk = FIO_1Disk
def FIO_12Disks = FIO_12Disks

def SIO_1Disk = SIO_1Disk
def SIO_12Disks = SIO_12Disks

def KQ_Perf = KQ_Perf

def SpecifiedFreebsdARMImage = "${env.SpecifiedFreebsdARMImage}"
def location = "${env.location}"
def SecretsFilePath = "C:/DoNotDelete/secretsFile.xml"
def AllFreebsdARMImages = ['MicrosoftOSTC FreeBSD 11.1 11.1.20180112', 
					   'MicrosoftOSTC FreeBSD 11.0 11.0.20180112', 
					   'MicrosoftOSTC FreeBSD 10.4 10.4.20180117', 
					   'MicrosoftOSTC FreeBSD 10.3 10.3.20180111']


					   
					   
def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
    // println "${psCmd}"
}


pipeline
{

    parameters {
		booleanParam(defaultValue: false, description: 'Fio single disk test.', name: 'FIO_1Disk')
		booleanParam(defaultValue: true, description: 'Fio x12 disks (RAID0) test.', name: 'FIO_12Disks')
		booleanParam(defaultValue: false, description: 'Sio single disk test.', name: 'SIO_1Disk')
		booleanParam(defaultValue: false, description: 'Sio x12 disks (RAID0) test.', name: 'SIO_12Disks')
		booleanParam(defaultValue: false, description: 'KQ perf test.', name: 'KQ_Perf')
		choice(choices: 'MicrosoftOSTC FreeBSD 11.1 11.1.20180112\nMicrosoftOSTC FreeBSD 11.0 11.0.20180112\nMicrosoftOSTC FreeBSD 10.4 10.4.20180117\nMicrosoftOSTC FreeBSD 10.3 10.3.20180111\nALL', description: 'It is a specified freebsd image. All latest images (10.3, 10.4, 11.0 and 11.1) will be tested if it is ALL.', name: 'SpecifiedFreebsdARMImage')
		choice(choices: 'disabled\nenabled\nboth', description: 'Provide SRIOV state for tests: enabled, disabled or both.', name: 'sriov')
		choice(choices: 'eastus2\naustraliaeast\nsoutheastasia\nwestcentralus\neastus', description: 'Data center location.', name: 'location')
    }

    agent {
        node {
          label 'azurebsd'
        }
    }
	
   	
	stages{	
	
		stage('FIO_1Disk dependencies') {
            when {
                expression { env.FIO_1Disk.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( SpecifiedFreebsdARMImage )
						{
							println "The test is only for the specified image: ${SpecifiedFreebsdARMImage}"
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdfiosingledisk'" +
								" -testCycle 'PERF-FIO-SingleDisk'" +
								" -ARMImageName '${SpecifiedFreebsdARMImage}'" +
								" -StorageAccount 'ExistingStorage_Premium'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_Fio'"
								)
						}
						else
						{						
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							for (int i = 0; i < AllFreebsdARMImages.size(); i++) {
								println "The current test image: ${AllFreebsdARMImages[i]}"
							
								RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdfiosingledisk'" +
								" -testCycle 'PERF-FIO-SingleDisk'" +
								" -ARMImageName '${AllFreebsdARMImages[i]}'" +
								" -StorageAccount 'ExistingStorage_Premium'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_Fio'"
								)		
								
							}
						}						
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "STAGE_FAILED_EXCEPTION."
					}

				}
			}
		
		}
		
		stage('FIO_12Disks dependencies') {
            when {
                expression { env.FIO_12Disks.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( SpecifiedFreebsdARMImage )
						{
							println "The test is only for the specified image: ${SpecifiedFreebsdARMImage}"
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdfioraid0'" +
								" -testCycle 'PERF-FIO-RAID0'" +
								" -ARMImageName '${SpecifiedFreebsdARMImage}'" +
								" -StorageAccount 'ExistingStorage_Premium'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_Fio'"
								)
						}
						else
						{						
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							for (int i = 0; i < AllFreebsdARMImages.size(); i++) {
								println "The current test image: ${AllFreebsdARMImages[i]}"
							
								RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdfioraid0'" +
								" -testCycle 'PERF-FIO-RAID0'" +
								" -ARMImageName '${AllFreebsdARMImages[i]}'" +
								" -StorageAccount 'ExistingStorage_Premium'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_Fio'"
								)		
								
							}
						}						
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "STAGE_FAILED_EXCEPTION."
					}

				}
			}
		
		}
		
		stage('SIO_1Disk dependencies') {
            when {
                expression { env.SIO_1Disk.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( SpecifiedFreebsdARMImage )
						{
							println "The test is only for the specified image: ${SpecifiedFreebsdARMImage}"
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdSiosingledisk'" +
								" -testCycle 'PERF-SIO-SingleDisk'" +
								" -ARMImageName '${SpecifiedFreebsdARMImage}'" +
								" -StorageAccount 'ExistingStorage_Premium'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_Sio'"
								)
						}
						else
						{						
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							for (int i = 0; i < AllFreebsdARMImages.size(); i++) {
								println "The current test image: ${AllFreebsdARMImages[i]}"
							
								RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdSiosingledisk'" +
								" -testCycle 'PERF-SIO-SingleDisk'" +
								" -ARMImageName '${AllFreebsdARMImages[i]}'" +
								" -StorageAccount 'ExistingStorage_Premium'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_Sio'"
								)		
								
							}
						}					
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "STAGE_FAILED_EXCEPTION."
					}

				}
			}
		
		}
		
		stage('SIO_12Disks dependencies') {
            when {
                expression { env.SIO_12Disks.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( SpecifiedFreebsdARMImage )
						{
							println "The test is only for the specified image: ${SpecifiedFreebsdARMImage}"
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdsioraid0'" +
								" -testCycle 'PERF-SIO-RAID0'" +
								" -ARMImageName '${SpecifiedFreebsdARMImage}'" +
								" -StorageAccount 'ExistingStorage_Premium'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_Sio'"
								)
						}
						else
						{						
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							for (int i = 0; i < AllFreebsdARMImages.size(); i++) {
								println "The current test image: ${AllFreebsdARMImages[i]}"
							
								RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdsioraid0'" +
								" -testCycle 'PERF-SIO-RAID0'" +
								" -ARMImageName '${AllFreebsdARMImages[i]}'" +
								" -StorageAccount 'ExistingStorage_Premium'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_Sio'"
								)		
								
							}
						}	
				
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "STAGE_FAILED_EXCEPTION."
					}

				}
			}
		
		}
		
		
		stage('KQ_Perf dependencies') {
            when {
                expression { env.KQ_Perf.contains('true') }
            }
			
			steps 
            {
				script {
					try{
						if( SpecifiedFreebsdARMImage )
						{
							println "The test is only for the specified image: ${SpecifiedFreebsdARMImage}"
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdkqperf'" +
								" -testCycle 'PERF-KQ'" +
								" -ARMImageName '${SpecifiedFreebsdARMImage}'" +
								" -StorageAccount 'ExistingStorage_Standard'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_KQ'"
								)
						}
						else
						{						
							git poll: false, changelog: false, url: 'https://github.com/xian123/azure-linux-automation', branch: 'test'
							for (int i = 0; i < AllFreebsdARMImages.size(); i++) {
								println "The current test image: ${AllFreebsdARMImages[i]}"
							
								RunPowershellCommand(".\\RunAzureTests.ps1" +
								" -testLocation '${location}'" +
								" -DistroIdentifier 'bsdkqperf'" +
								" -testCycle 'PERF-KQ'" +
								" -ARMImageName '${AllFreebsdARMImages[i]}'" +
								" -StorageAccount 'ExistingStorage_Standard'" +
								" -customSecretsFilePath '${SecretsFilePath}'"  +
								" -ResultDBTable 'Perf_FreeBSD_Marketplace_Azure_KQ'"
								)		
								
							}
						}	
					}
					catch (exc)
					{
						currentBuild.result = 'FAILURE'
						println "STAGE_FAILED_EXCEPTION."
					}

				}
			}
		
		}
		
		
	}

	//Post #TODO
  
}



